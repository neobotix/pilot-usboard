
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_pilot_usboard_USBoardModuleBase_HXX_
#define INCLUDE_pilot_usboard_USBoardModuleBase_HXX_

#include <pilot/usboard/package.hxx>
#include <pilot/usboard/USBoardConfig.hxx>
#include <vnx/Module.h>
#include <vnx/TopicPtr.hpp>


namespace pilot {
namespace usboard {

class USBoardModuleBase : public ::vnx::Module {
public:
	
	::vnx::TopicPtr input_can;
	::vnx::TopicPtr input_serial;
	::vnx::TopicPtr topic_can_request;
	::vnx::TopicPtr topic_serial_request;
	::vnx::TopicPtr output_data;
	::vnx::TopicPtr output_config;
	std::string config_file;
	
	typedef ::vnx::Module Super;
	
	static const vnx::Hash64 VNX_TYPE_HASH;
	static const vnx::Hash64 VNX_CODE_HASH;
	
	USBoardModuleBase(const std::string& _vnx_name);
	
	vnx::Hash64 get_type_hash() const;
	const char* get_type_name() const;
	const vnx::TypeCode* get_type_code() const;
	
	void read(std::istream& _in);
	void write(std::ostream& _out) const;
	
	void accept(vnx::Visitor& _visitor) const;
	
	vnx::Object to_object() const;
	void from_object(const vnx::Object& object);
	
	friend std::ostream& operator<<(std::ostream& _out, const USBoardModuleBase& _value);
	friend std::istream& operator>>(std::istream& _in, USBoardModuleBase& _value);
	
	static const vnx::TypeCode* static_get_type_code();
	static std::shared_ptr<vnx::TypeCode> static_create_type_code();
	
protected:
	virtual std::shared_ptr<const ::pilot::usboard::USBoardConfig> get_config() const = 0;
	virtual vnx::bool_t is_connected() const = 0;
	virtual void request_analog_data() = 0;
	virtual void request_config() = 0;
	virtual void request_data(const std::vector<vnx::bool_t>& groups) = 0;
	virtual void save_config(const std::shared_ptr<const ::pilot::usboard::USBoardConfig>& config) = 0;
	virtual void send_config(const std::shared_ptr<const ::pilot::usboard::USBoardConfig>& config) = 0;
	virtual void set_channel_active(const std::vector<vnx::bool_t>& sensors) = 0;
	
	void vnx_handle_switch(std::shared_ptr<const vnx::Sample> _sample) override;
	std::shared_ptr<vnx::Value> vnx_call_switch(std::shared_ptr<const vnx::Value> _method, const vnx::request_id_t& _request_id) override;
	
};


} // namespace pilot
} // namespace usboard

#endif // INCLUDE_pilot_usboard_USBoardModuleBase_HXX_
