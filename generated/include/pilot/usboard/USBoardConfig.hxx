
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_pilot_usboard_USBoardConfig_HXX_
#define INCLUDE_pilot_usboard_USBoardConfig_HXX_

#include <pilot/usboard/package.hxx>
#include <pilot/base/CAN_Frame.hxx>
#include <pilot/usboard/group_config_t.hxx>
#include <pilot/usboard/sensor_config_t.hxx>
#include <vnx/Value.h>


namespace pilot {
namespace usboard {

class USBoardConfig : public ::vnx::Value {
public:
	static const int32_t SENSOR_SETUP_4 = 1;
	static const int32_t SENSOR_SETUP_8 = 3;
	static const int32_t SENSOR_SETUP_12 = 7;
	static const int32_t SENSOR_SETUP_16 = 15;
	static const int32_t TRANSMIT_MODE_REQUEST = 1;
	static const int32_t TRANSMIT_MODE_CAN = 2;
	static const int32_t TRANSMIT_MODE_SERIAL = 3;
	static const int32_t TRANSMIT_MODE_CAN_SERIAL = 4;
	
	int32_t serial_number = -1;
	int32_t can_id = 1024;
	int32_t can_baudrate = 1000000;
	int32_t update_interval_ms = 200;
	int32_t sensor_setup = 15;
	int32_t transmit_mode = 1;
	std::array<::pilot::usboard::sensor_config_t, 16> sensor_config = {};
	std::array<::pilot::usboard::group_config_t, 4> group_config = {};
	vnx::float32_t low_pass_gain = 1;
	vnx::bool_t enable_analog_input = false;
	vnx::bool_t enable_legacy_format = false;
	vnx::bool_t enable_can_termination = false;
	
	typedef ::vnx::Value Super;
	
	static const vnx::Hash64 VNX_TYPE_HASH;
	static const vnx::Hash64 VNX_CODE_HASH;
	
	vnx::Hash64 get_type_hash() const override;
	const char* get_type_name() const override;
	const vnx::TypeCode* get_type_code() const override;
	
	virtual std::vector<::pilot::base::CAN_Frame> to_can_frames() const;
	virtual void from_can_frames(const std::vector<::pilot::base::CAN_Frame>& frames);
	
	static std::shared_ptr<USBoardConfig> create();
	std::shared_ptr<vnx::Value> clone() const;
	
	void read(vnx::TypeInput& _in, const vnx::TypeCode* _type_code, const uint16_t* _code);
	void write(vnx::TypeOutput& _out, const vnx::TypeCode* _type_code, const uint16_t* _code) const;
	
	void read(std::istream& _in);
	void write(std::ostream& _out) const;
	
	void accept(vnx::Visitor& _visitor) const;
	
	vnx::Object to_object() const;
	void from_object(const vnx::Object& object);
	
	friend std::ostream& operator<<(std::ostream& _out, const USBoardConfig& _value);
	friend std::istream& operator>>(std::istream& _in, USBoardConfig& _value);
	
	static const vnx::TypeCode* static_get_type_code();
	static std::shared_ptr<vnx::TypeCode> static_create_type_code();
	
};


} // namespace pilot
} // namespace usboard

#endif // INCLUDE_pilot_usboard_USBoardConfig_HXX_
