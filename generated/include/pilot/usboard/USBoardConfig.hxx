
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_pilot_usboard_USBoardConfig_HXX_
#define INCLUDE_pilot_usboard_USBoardConfig_HXX_

#include <pilot/usboard/package.hxx>
#include <pilot/base/CAN_Frame.hxx>
#include <pilot/usboard/group_config_t.hxx>
#include <pilot/usboard/sensor_config_t.hxx>
#include <vnx/Value.h>


namespace pilot {
namespace usboard {

class USBoardConfig : public ::vnx::Value {
public:
	static const uint32_t TRANSMIT_MODE_REQUEST = 0;
	static const uint32_t TRANSMIT_MODE_CAN = 1;
	static const uint32_t TRANSMIT_MODE_SERIAL = 2;
	static const uint32_t TRANSMIT_MODE_CAN_SERIAL = 3;
	
	uint32_t hardware_version = 0;
	uint32_t serial_number = 0;
	uint32_t can_id = 1024;
	uint32_t can_baudrate = 1000000;
	uint32_t update_interval_ms = 500;
	uint32_t transmit_mode = 0;
	std::array<::pilot::usboard::sensor_config_t, 16> sensor_config = {};
	std::array<::pilot::usboard::group_config_t, 4> group_config = {};
	vnx::float32_t low_pass_gain = 1;
	vnx::bool_t enable_analog_input = false;
	vnx::bool_t enable_legacy_format = false;
	vnx::bool_t enable_can_termination = false;
	vnx::bool_t relay_warn_blocked_invert = false;
	vnx::bool_t relay_alarm_blocked_invert = false;
	
	typedef ::vnx::Value Super;
	
	static const vnx::Hash64 VNX_TYPE_HASH;
	static const vnx::Hash64 VNX_CODE_HASH;
	
	static constexpr uint64_t VNX_TYPE_ID = 0x9c0fb140354b6e4cull;
	
	vnx::Hash64 get_type_hash() const override;
	std::string get_type_name() const override;
	const vnx::TypeCode* get_type_code() const override;
	
	virtual std::vector<::pilot::base::CAN_Frame> to_can_frames() const;
	virtual void from_can_frames(const std::vector<::pilot::base::CAN_Frame>& frames);
	virtual uint32_t count_transmitting_groups() const;
	
	static std::shared_ptr<USBoardConfig> create();
	std::shared_ptr<vnx::Value> clone() const override;
	
	void read(vnx::TypeInput& _in, const vnx::TypeCode* _type_code, const uint16_t* _code) override;
	void write(vnx::TypeOutput& _out, const vnx::TypeCode* _type_code, const uint16_t* _code) const override;
	
	void read(std::istream& _in) override;
	void write(std::ostream& _out) const override;
	
	void accept(vnx::Visitor& _visitor) const override;
	
	vnx::Object to_object() const override;
	void from_object(const vnx::Object& object) override;
	
	vnx::Variant get_field(const std::string& name) const override;
	void set_field(const std::string& name, const vnx::Variant& value) override;
	
	friend std::ostream& operator<<(std::ostream& _out, const USBoardConfig& _value);
	friend std::istream& operator>>(std::istream& _in, USBoardConfig& _value);
	
	static const vnx::TypeCode* static_get_type_code();
	static std::shared_ptr<vnx::TypeCode> static_create_type_code();
	
};


} // namespace pilot
} // namespace usboard


namespace vnx {

} // vnx

#endif // INCLUDE_pilot_usboard_USBoardConfig_HXX_
