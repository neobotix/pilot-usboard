
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_pilot_usboard_PACKAGE_HXX_
#define INCLUDE_pilot_usboard_PACKAGE_HXX_

#include <vnx/Type.h>

#include <pilot/base/package.hxx>
#include <vnx/package.hxx>


namespace pilot {
namespace usboard {


class USBoardConfig;
class USBoardData;
class USBoardModuleBase;
class USBoardModule_get_config;
class USBoardModule_get_config_return;
class USBoardModule_is_connected;
class USBoardModule_is_connected_return;
class USBoardModule_request_analog_data;
class USBoardModule_request_analog_data_return;
class USBoardModule_request_config;
class USBoardModule_request_config_return;
class USBoardModule_request_data;
class USBoardModule_request_data_return;
class USBoardModule_save_config;
class USBoardModule_save_config_return;
class USBoardModule_send_config;
class USBoardModule_send_config_return;
class USBoardModule_set_channel_active;
class USBoardModule_set_channel_active_return;
class group_config_t;
class sensor_config_t;

extern const vnx::TypeCode* const vnx_native_type_code_USBoardConfig; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_USBoardData; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_USBoardModuleBase; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_USBoardModule_get_config; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_USBoardModule_get_config_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_USBoardModule_is_connected; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_USBoardModule_is_connected_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_USBoardModule_request_analog_data; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_USBoardModule_request_analog_data_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_USBoardModule_request_config; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_USBoardModule_request_config_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_USBoardModule_request_data; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_USBoardModule_request_data_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_USBoardModule_save_config; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_USBoardModule_save_config_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_USBoardModule_send_config; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_USBoardModule_send_config_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_USBoardModule_set_channel_active; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_USBoardModule_set_channel_active_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_group_config_t; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_sensor_config_t; ///< \private

} // namespace pilot
} // namespace usboard


namespace vnx {

void read(TypeInput& in, ::pilot::usboard::USBoardConfig& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::usboard::USBoardData& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::usboard::USBoardModuleBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::usboard::USBoardModule_get_config& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::usboard::USBoardModule_get_config_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::usboard::USBoardModule_is_connected& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::usboard::USBoardModule_is_connected_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::usboard::USBoardModule_request_analog_data& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::usboard::USBoardModule_request_analog_data_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::usboard::USBoardModule_request_config& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::usboard::USBoardModule_request_config_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::usboard::USBoardModule_request_data& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::usboard::USBoardModule_request_data_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::usboard::USBoardModule_save_config& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::usboard::USBoardModule_save_config_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::usboard::USBoardModule_send_config& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::usboard::USBoardModule_send_config_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::usboard::USBoardModule_set_channel_active& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::usboard::USBoardModule_set_channel_active_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::usboard::group_config_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::usboard::sensor_config_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private

void write(TypeOutput& out, const ::pilot::usboard::USBoardConfig& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::usboard::USBoardData& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::usboard::USBoardModuleBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::usboard::USBoardModule_get_config& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::usboard::USBoardModule_get_config_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::usboard::USBoardModule_is_connected& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::usboard::USBoardModule_is_connected_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::usboard::USBoardModule_request_analog_data& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::usboard::USBoardModule_request_analog_data_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::usboard::USBoardModule_request_config& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::usboard::USBoardModule_request_config_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::usboard::USBoardModule_request_data& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::usboard::USBoardModule_request_data_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::usboard::USBoardModule_save_config& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::usboard::USBoardModule_save_config_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::usboard::USBoardModule_send_config& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::usboard::USBoardModule_send_config_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::usboard::USBoardModule_set_channel_active& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::usboard::USBoardModule_set_channel_active_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::usboard::group_config_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::usboard::sensor_config_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private

void read(std::istream& in, ::pilot::usboard::USBoardConfig& value); ///< \private
void read(std::istream& in, ::pilot::usboard::USBoardData& value); ///< \private
void read(std::istream& in, ::pilot::usboard::USBoardModuleBase& value); ///< \private
void read(std::istream& in, ::pilot::usboard::USBoardModule_get_config& value); ///< \private
void read(std::istream& in, ::pilot::usboard::USBoardModule_get_config_return& value); ///< \private
void read(std::istream& in, ::pilot::usboard::USBoardModule_is_connected& value); ///< \private
void read(std::istream& in, ::pilot::usboard::USBoardModule_is_connected_return& value); ///< \private
void read(std::istream& in, ::pilot::usboard::USBoardModule_request_analog_data& value); ///< \private
void read(std::istream& in, ::pilot::usboard::USBoardModule_request_analog_data_return& value); ///< \private
void read(std::istream& in, ::pilot::usboard::USBoardModule_request_config& value); ///< \private
void read(std::istream& in, ::pilot::usboard::USBoardModule_request_config_return& value); ///< \private
void read(std::istream& in, ::pilot::usboard::USBoardModule_request_data& value); ///< \private
void read(std::istream& in, ::pilot::usboard::USBoardModule_request_data_return& value); ///< \private
void read(std::istream& in, ::pilot::usboard::USBoardModule_save_config& value); ///< \private
void read(std::istream& in, ::pilot::usboard::USBoardModule_save_config_return& value); ///< \private
void read(std::istream& in, ::pilot::usboard::USBoardModule_send_config& value); ///< \private
void read(std::istream& in, ::pilot::usboard::USBoardModule_send_config_return& value); ///< \private
void read(std::istream& in, ::pilot::usboard::USBoardModule_set_channel_active& value); ///< \private
void read(std::istream& in, ::pilot::usboard::USBoardModule_set_channel_active_return& value); ///< \private
void read(std::istream& in, ::pilot::usboard::group_config_t& value); ///< \private
void read(std::istream& in, ::pilot::usboard::sensor_config_t& value); ///< \private

void write(std::ostream& out, const ::pilot::usboard::USBoardConfig& value); ///< \private
void write(std::ostream& out, const ::pilot::usboard::USBoardData& value); ///< \private
void write(std::ostream& out, const ::pilot::usboard::USBoardModuleBase& value); ///< \private
void write(std::ostream& out, const ::pilot::usboard::USBoardModule_get_config& value); ///< \private
void write(std::ostream& out, const ::pilot::usboard::USBoardModule_get_config_return& value); ///< \private
void write(std::ostream& out, const ::pilot::usboard::USBoardModule_is_connected& value); ///< \private
void write(std::ostream& out, const ::pilot::usboard::USBoardModule_is_connected_return& value); ///< \private
void write(std::ostream& out, const ::pilot::usboard::USBoardModule_request_analog_data& value); ///< \private
void write(std::ostream& out, const ::pilot::usboard::USBoardModule_request_analog_data_return& value); ///< \private
void write(std::ostream& out, const ::pilot::usboard::USBoardModule_request_config& value); ///< \private
void write(std::ostream& out, const ::pilot::usboard::USBoardModule_request_config_return& value); ///< \private
void write(std::ostream& out, const ::pilot::usboard::USBoardModule_request_data& value); ///< \private
void write(std::ostream& out, const ::pilot::usboard::USBoardModule_request_data_return& value); ///< \private
void write(std::ostream& out, const ::pilot::usboard::USBoardModule_save_config& value); ///< \private
void write(std::ostream& out, const ::pilot::usboard::USBoardModule_save_config_return& value); ///< \private
void write(std::ostream& out, const ::pilot::usboard::USBoardModule_send_config& value); ///< \private
void write(std::ostream& out, const ::pilot::usboard::USBoardModule_send_config_return& value); ///< \private
void write(std::ostream& out, const ::pilot::usboard::USBoardModule_set_channel_active& value); ///< \private
void write(std::ostream& out, const ::pilot::usboard::USBoardModule_set_channel_active_return& value); ///< \private
void write(std::ostream& out, const ::pilot::usboard::group_config_t& value); ///< \private
void write(std::ostream& out, const ::pilot::usboard::sensor_config_t& value); ///< \private

void accept(Visitor& visitor, const ::pilot::usboard::USBoardConfig& value); ///< \private
void accept(Visitor& visitor, const ::pilot::usboard::USBoardData& value); ///< \private
void accept(Visitor& visitor, const ::pilot::usboard::USBoardModuleBase& value); ///< \private
void accept(Visitor& visitor, const ::pilot::usboard::USBoardModule_get_config& value); ///< \private
void accept(Visitor& visitor, const ::pilot::usboard::USBoardModule_get_config_return& value); ///< \private
void accept(Visitor& visitor, const ::pilot::usboard::USBoardModule_is_connected& value); ///< \private
void accept(Visitor& visitor, const ::pilot::usboard::USBoardModule_is_connected_return& value); ///< \private
void accept(Visitor& visitor, const ::pilot::usboard::USBoardModule_request_analog_data& value); ///< \private
void accept(Visitor& visitor, const ::pilot::usboard::USBoardModule_request_analog_data_return& value); ///< \private
void accept(Visitor& visitor, const ::pilot::usboard::USBoardModule_request_config& value); ///< \private
void accept(Visitor& visitor, const ::pilot::usboard::USBoardModule_request_config_return& value); ///< \private
void accept(Visitor& visitor, const ::pilot::usboard::USBoardModule_request_data& value); ///< \private
void accept(Visitor& visitor, const ::pilot::usboard::USBoardModule_request_data_return& value); ///< \private
void accept(Visitor& visitor, const ::pilot::usboard::USBoardModule_save_config& value); ///< \private
void accept(Visitor& visitor, const ::pilot::usboard::USBoardModule_save_config_return& value); ///< \private
void accept(Visitor& visitor, const ::pilot::usboard::USBoardModule_send_config& value); ///< \private
void accept(Visitor& visitor, const ::pilot::usboard::USBoardModule_send_config_return& value); ///< \private
void accept(Visitor& visitor, const ::pilot::usboard::USBoardModule_set_channel_active& value); ///< \private
void accept(Visitor& visitor, const ::pilot::usboard::USBoardModule_set_channel_active_return& value); ///< \private
void accept(Visitor& visitor, const ::pilot::usboard::group_config_t& value); ///< \private
void accept(Visitor& visitor, const ::pilot::usboard::sensor_config_t& value); ///< \private

/// \private
template<>
struct type<::pilot::usboard::USBoardConfig> {
	void read(TypeInput& in, ::pilot::usboard::USBoardConfig& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::usboard::USBoardConfig& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::usboard::USBoardConfig& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::usboard::USBoardConfig& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::usboard::USBoardConfig& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::usboard::USBoardConfig& value, bool special = false) {
		code.push_back(CODE_OBJECT);
	}
};

/// \private
template<>
struct type<::pilot::usboard::USBoardData> {
	void read(TypeInput& in, ::pilot::usboard::USBoardData& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::usboard::USBoardData& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::usboard::USBoardData& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::usboard::USBoardData& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::usboard::USBoardData& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::usboard::USBoardData& value, bool special = false) {
		code.push_back(CODE_OBJECT);
	}
};

/// \private
template<>
struct type<::pilot::usboard::USBoardModuleBase> {
	void read(TypeInput& in, ::pilot::usboard::USBoardModuleBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::usboard::USBoardModuleBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::usboard::USBoardModuleBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::usboard::USBoardModuleBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::usboard::USBoardModuleBase& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::pilot::usboard::USBoardModule_get_config> {
	void read(TypeInput& in, ::pilot::usboard::USBoardModule_get_config& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::usboard::USBoardModule_get_config& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::usboard::USBoardModule_get_config& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::usboard::USBoardModule_get_config& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::usboard::USBoardModule_get_config& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::usboard::USBoardModule_get_config& value, bool special = false) {
		code.push_back(CODE_OBJECT);
	}
};

/// \private
template<>
struct type<::pilot::usboard::USBoardModule_get_config_return> {
	void read(TypeInput& in, ::pilot::usboard::USBoardModule_get_config_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::usboard::USBoardModule_get_config_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::usboard::USBoardModule_get_config_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::usboard::USBoardModule_get_config_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::usboard::USBoardModule_get_config_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::usboard::USBoardModule_get_config_return& value, bool special = false) {
		code.push_back(CODE_OBJECT);
	}
};

/// \private
template<>
struct type<::pilot::usboard::USBoardModule_is_connected> {
	void read(TypeInput& in, ::pilot::usboard::USBoardModule_is_connected& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::usboard::USBoardModule_is_connected& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::usboard::USBoardModule_is_connected& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::usboard::USBoardModule_is_connected& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::usboard::USBoardModule_is_connected& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::usboard::USBoardModule_is_connected& value, bool special = false) {
		code.push_back(CODE_OBJECT);
	}
};

/// \private
template<>
struct type<::pilot::usboard::USBoardModule_is_connected_return> {
	void read(TypeInput& in, ::pilot::usboard::USBoardModule_is_connected_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::usboard::USBoardModule_is_connected_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::usboard::USBoardModule_is_connected_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::usboard::USBoardModule_is_connected_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::usboard::USBoardModule_is_connected_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::usboard::USBoardModule_is_connected_return& value, bool special = false) {
		code.push_back(CODE_OBJECT);
	}
};

/// \private
template<>
struct type<::pilot::usboard::USBoardModule_request_analog_data> {
	void read(TypeInput& in, ::pilot::usboard::USBoardModule_request_analog_data& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::usboard::USBoardModule_request_analog_data& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::usboard::USBoardModule_request_analog_data& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::usboard::USBoardModule_request_analog_data& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::usboard::USBoardModule_request_analog_data& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::usboard::USBoardModule_request_analog_data& value, bool special = false) {
		code.push_back(CODE_OBJECT);
	}
};

/// \private
template<>
struct type<::pilot::usboard::USBoardModule_request_analog_data_return> {
	void read(TypeInput& in, ::pilot::usboard::USBoardModule_request_analog_data_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::usboard::USBoardModule_request_analog_data_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::usboard::USBoardModule_request_analog_data_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::usboard::USBoardModule_request_analog_data_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::usboard::USBoardModule_request_analog_data_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::usboard::USBoardModule_request_analog_data_return& value, bool special = false) {
		code.push_back(CODE_OBJECT);
	}
};

/// \private
template<>
struct type<::pilot::usboard::USBoardModule_request_config> {
	void read(TypeInput& in, ::pilot::usboard::USBoardModule_request_config& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::usboard::USBoardModule_request_config& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::usboard::USBoardModule_request_config& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::usboard::USBoardModule_request_config& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::usboard::USBoardModule_request_config& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::usboard::USBoardModule_request_config& value, bool special = false) {
		code.push_back(CODE_OBJECT);
	}
};

/// \private
template<>
struct type<::pilot::usboard::USBoardModule_request_config_return> {
	void read(TypeInput& in, ::pilot::usboard::USBoardModule_request_config_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::usboard::USBoardModule_request_config_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::usboard::USBoardModule_request_config_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::usboard::USBoardModule_request_config_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::usboard::USBoardModule_request_config_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::usboard::USBoardModule_request_config_return& value, bool special = false) {
		code.push_back(CODE_OBJECT);
	}
};

/// \private
template<>
struct type<::pilot::usboard::USBoardModule_request_data> {
	void read(TypeInput& in, ::pilot::usboard::USBoardModule_request_data& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::usboard::USBoardModule_request_data& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::usboard::USBoardModule_request_data& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::usboard::USBoardModule_request_data& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::usboard::USBoardModule_request_data& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::usboard::USBoardModule_request_data& value, bool special = false) {
		code.push_back(CODE_OBJECT);
	}
};

/// \private
template<>
struct type<::pilot::usboard::USBoardModule_request_data_return> {
	void read(TypeInput& in, ::pilot::usboard::USBoardModule_request_data_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::usboard::USBoardModule_request_data_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::usboard::USBoardModule_request_data_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::usboard::USBoardModule_request_data_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::usboard::USBoardModule_request_data_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::usboard::USBoardModule_request_data_return& value, bool special = false) {
		code.push_back(CODE_OBJECT);
	}
};

/// \private
template<>
struct type<::pilot::usboard::USBoardModule_save_config> {
	void read(TypeInput& in, ::pilot::usboard::USBoardModule_save_config& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::usboard::USBoardModule_save_config& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::usboard::USBoardModule_save_config& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::usboard::USBoardModule_save_config& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::usboard::USBoardModule_save_config& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::usboard::USBoardModule_save_config& value, bool special = false) {
		code.push_back(CODE_OBJECT);
	}
};

/// \private
template<>
struct type<::pilot::usboard::USBoardModule_save_config_return> {
	void read(TypeInput& in, ::pilot::usboard::USBoardModule_save_config_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::usboard::USBoardModule_save_config_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::usboard::USBoardModule_save_config_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::usboard::USBoardModule_save_config_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::usboard::USBoardModule_save_config_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::usboard::USBoardModule_save_config_return& value, bool special = false) {
		code.push_back(CODE_OBJECT);
	}
};

/// \private
template<>
struct type<::pilot::usboard::USBoardModule_send_config> {
	void read(TypeInput& in, ::pilot::usboard::USBoardModule_send_config& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::usboard::USBoardModule_send_config& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::usboard::USBoardModule_send_config& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::usboard::USBoardModule_send_config& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::usboard::USBoardModule_send_config& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::usboard::USBoardModule_send_config& value, bool special = false) {
		code.push_back(CODE_OBJECT);
	}
};

/// \private
template<>
struct type<::pilot::usboard::USBoardModule_send_config_return> {
	void read(TypeInput& in, ::pilot::usboard::USBoardModule_send_config_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::usboard::USBoardModule_send_config_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::usboard::USBoardModule_send_config_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::usboard::USBoardModule_send_config_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::usboard::USBoardModule_send_config_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::usboard::USBoardModule_send_config_return& value, bool special = false) {
		code.push_back(CODE_OBJECT);
	}
};

/// \private
template<>
struct type<::pilot::usboard::USBoardModule_set_channel_active> {
	void read(TypeInput& in, ::pilot::usboard::USBoardModule_set_channel_active& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::usboard::USBoardModule_set_channel_active& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::usboard::USBoardModule_set_channel_active& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::usboard::USBoardModule_set_channel_active& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::usboard::USBoardModule_set_channel_active& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::usboard::USBoardModule_set_channel_active& value, bool special = false) {
		code.push_back(CODE_OBJECT);
	}
};

/// \private
template<>
struct type<::pilot::usboard::USBoardModule_set_channel_active_return> {
	void read(TypeInput& in, ::pilot::usboard::USBoardModule_set_channel_active_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::usboard::USBoardModule_set_channel_active_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::usboard::USBoardModule_set_channel_active_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::usboard::USBoardModule_set_channel_active_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::usboard::USBoardModule_set_channel_active_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::usboard::USBoardModule_set_channel_active_return& value, bool special = false) {
		code.push_back(CODE_OBJECT);
	}
};

/// \private
template<>
struct type<::pilot::usboard::group_config_t> {
	void read(TypeInput& in, ::pilot::usboard::group_config_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::usboard::group_config_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::usboard::group_config_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::usboard::group_config_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::usboard::group_config_t& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::usboard::group_config_t& value, bool special = false) {
		code.push_back(CODE_OBJECT);
	}
};

/// \private
template<>
struct type<::pilot::usboard::sensor_config_t> {
	void read(TypeInput& in, ::pilot::usboard::sensor_config_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::usboard::sensor_config_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::usboard::sensor_config_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::usboard::sensor_config_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::usboard::sensor_config_t& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::usboard::sensor_config_t& value, bool special = false) {
		code.push_back(CODE_OBJECT);
	}
};


} // namespace vnx

#endif // INCLUDE_pilot_usboard_PACKAGE_HXX_
