
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_pilot_usboard_USBoardModule_ASYNC_CLIENT_HXX_
#define INCLUDE_pilot_usboard_USBoardModule_ASYNC_CLIENT_HXX_

#include <vnx/AsyncClient.h>
#include <pilot/base/CAN_Frame.hxx>
#include <pilot/base/DataPacket.hxx>
#include <pilot/usboard/USBoardConfig.hxx>
#include <vnx/Module.h>
#include <vnx/TopicPtr.hpp>


namespace pilot {
namespace usboard {

class USBoardModuleAsyncClient : public vnx::AsyncClient {
public:
	USBoardModuleAsyncClient(const std::string& service_name);
	
	USBoardModuleAsyncClient(vnx::Hash64 service_addr);
	
	uint64_t vnx_get_type_code(
			const std::function<void(::vnx::TypeCode)>& _callback = std::function<void(::vnx::TypeCode)>(),
			const std::function<void(const std::exception&)>& _error_callback = std::function<void(const std::exception&)>());
	
	uint64_t is_connected(
			const std::function<void(vnx::bool_t)>& _callback = std::function<void(vnx::bool_t)>(),
			const std::function<void(const std::exception&)>& _error_callback = std::function<void(const std::exception&)>());
	
	uint64_t request_data(const std::vector<vnx::bool_t>& groups, 
			const std::function<void()>& _callback = std::function<void()>(),
			const std::function<void(const std::exception&)>& _error_callback = std::function<void(const std::exception&)>());
	
	uint64_t request_analog_data(
			const std::function<void()>& _callback = std::function<void()>(),
			const std::function<void(const std::exception&)>& _error_callback = std::function<void(const std::exception&)>());
	
	uint64_t request_config(
			const std::function<void()>& _callback = std::function<void()>(),
			const std::function<void(const std::exception&)>& _error_callback = std::function<void(const std::exception&)>());
	
	uint64_t get_config(
			const std::function<void(std::shared_ptr<const ::pilot::usboard::USBoardConfig>)>& _callback = std::function<void(std::shared_ptr<const ::pilot::usboard::USBoardConfig>)>(),
			const std::function<void(const std::exception&)>& _error_callback = std::function<void(const std::exception&)>());
	
	uint64_t set_channel_active(const std::vector<vnx::bool_t>& sensors, 
			const std::function<void()>& _callback = std::function<void()>(),
			const std::function<void(const std::exception&)>& _error_callback = std::function<void(const std::exception&)>());
	
	uint64_t send_config(const std::shared_ptr<const ::pilot::usboard::USBoardConfig>& config, 
			const std::function<void()>& _callback = std::function<void()>(),
			const std::function<void(const std::exception&)>& _error_callback = std::function<void(const std::exception&)>());
	
	uint64_t save_config(const std::shared_ptr<const ::pilot::usboard::USBoardConfig>& config, 
			const std::function<void()>& _callback = std::function<void()>(),
			const std::function<void(const std::exception&)>& _error_callback = std::function<void(const std::exception&)>());
	
	std::vector<uint64_t> vnx_get_pending_ids() const override;
	
protected:
	void vnx_purge_request(uint64_t _request_id, const std::exception& _ex) override;
	
	void vnx_callback_switch(uint64_t _request_id, std::shared_ptr<const vnx::Value> _value) override;
	
private:
	std::map<uint64_t, std::pair<std::function<void(::vnx::TypeCode)>, std::function<void(const std::exception&)>>> vnx_queue_vnx_get_type_code;
	std::map<uint64_t, std::pair<std::function<void(vnx::bool_t)>, std::function<void(const std::exception&)>>> vnx_queue_is_connected;
	std::map<uint64_t, std::pair<std::function<void()>, std::function<void(const std::exception&)>>> vnx_queue_request_data;
	std::map<uint64_t, std::pair<std::function<void()>, std::function<void(const std::exception&)>>> vnx_queue_request_analog_data;
	std::map<uint64_t, std::pair<std::function<void()>, std::function<void(const std::exception&)>>> vnx_queue_request_config;
	std::map<uint64_t, std::pair<std::function<void(std::shared_ptr<const ::pilot::usboard::USBoardConfig>)>, std::function<void(const std::exception&)>>> vnx_queue_get_config;
	std::map<uint64_t, std::pair<std::function<void()>, std::function<void(const std::exception&)>>> vnx_queue_set_channel_active;
	std::map<uint64_t, std::pair<std::function<void()>, std::function<void(const std::exception&)>>> vnx_queue_send_config;
	std::map<uint64_t, std::pair<std::function<void()>, std::function<void(const std::exception&)>>> vnx_queue_save_config;
	
};


} // namespace pilot
} // namespace usboard

#endif // INCLUDE_pilot_usboard_USBoardModule_ASYNC_CLIENT_HXX_
