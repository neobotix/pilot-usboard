
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_pilot_usboard_USBoardData_HXX_
#define INCLUDE_pilot_usboard_USBoardData_HXX_

#include <pilot/usboard/package.hxx>
#include <pilot/base/CAN_Frame.hxx>
#include <vnx/Value.h>


namespace pilot {
namespace usboard {

class USBoardData : public ::vnx::Value {
public:
	
	int64_t time = 0;
	std::array<vnx::float32_t, 16> sensor = {};
	std::array<int8_t, 4> signal_source = {};
	std::array<int16_t, 4> analog_input = {};
	vnx::float32_t analog_input_scale = 0.001221;
	
	typedef ::vnx::Value Super;
	
	static const vnx::Hash64 VNX_TYPE_HASH;
	static const vnx::Hash64 VNX_CODE_HASH;
	
	vnx::Hash64 get_type_hash() const override;
	const char* get_type_name() const override;
	const vnx::TypeCode* get_type_code() const override;
	
	virtual void from_can_frames_1to8(const std::vector<::pilot::base::CAN_Frame>& frames);
	virtual void from_can_frames_9to16(const std::vector<::pilot::base::CAN_Frame>& frames);
	virtual void from_can_frames_analog(const std::vector<::pilot::base::CAN_Frame>& frames);
	virtual void from_can_frames_data(const std::vector<::pilot::base::CAN_Frame>& frames);
	
	static std::shared_ptr<USBoardData> create();
	std::shared_ptr<vnx::Value> clone() const override;
	
	void read(vnx::TypeInput& _in, const vnx::TypeCode* _type_code, const uint16_t* _code) override;
	void write(vnx::TypeOutput& _out, const vnx::TypeCode* _type_code, const uint16_t* _code) const override;
	
	void read(std::istream& _in) override;
	void write(std::ostream& _out) const override;
	
	void accept(vnx::Visitor& _visitor) const override;
	
	vnx::Object to_object() const override;
	void from_object(const vnx::Object& object) override;
	
	vnx::Variant get_field(const std::string& name) const override;
	void set_field(const std::string& name, const vnx::Variant& value) override;
	
	friend std::ostream& operator<<(std::ostream& _out, const USBoardData& _value);
	friend std::istream& operator>>(std::istream& _in, USBoardData& _value);
	
	static const vnx::TypeCode* static_get_type_code();
	static std::shared_ptr<vnx::TypeCode> static_create_type_code();
	
};


} // namespace pilot
} // namespace usboard

#endif // INCLUDE_pilot_usboard_USBoardData_HXX_
