
// AUTO GENERATED by vnxcppcodegen

#include <vnx/vnx.h>
#include <pilot/usboard/package.hxx>
#include <pilot/usboard/USBoardModuleBase.hxx>
#include <vnx/NoSuchMethod.hxx>
#include <pilot/usboard/USBoardConfig.hxx>
#include <pilot/usboard/USBoardModule_get_config.hxx>
#include <pilot/usboard/USBoardModule_get_config_return.hxx>
#include <pilot/usboard/USBoardModule_is_connected.hxx>
#include <pilot/usboard/USBoardModule_is_connected_return.hxx>
#include <pilot/usboard/USBoardModule_request_analog_data.hxx>
#include <pilot/usboard/USBoardModule_request_analog_data_return.hxx>
#include <pilot/usboard/USBoardModule_request_config.hxx>
#include <pilot/usboard/USBoardModule_request_config_return.hxx>
#include <pilot/usboard/USBoardModule_request_data.hxx>
#include <pilot/usboard/USBoardModule_request_data_return.hxx>
#include <pilot/usboard/USBoardModule_save_config.hxx>
#include <pilot/usboard/USBoardModule_save_config_return.hxx>
#include <pilot/usboard/USBoardModule_send_config.hxx>
#include <pilot/usboard/USBoardModule_send_config_return.hxx>
#include <pilot/usboard/USBoardModule_set_channel_active.hxx>
#include <pilot/usboard/USBoardModule_set_channel_active_return.hxx>
#include <vnx/Module.h>
#include <vnx/TopicPtr.hpp>



namespace pilot {
namespace usboard {


const vnx::Hash64 USBoardModuleBase::VNX_TYPE_HASH(0x43f03ccffe42b23full);
const vnx::Hash64 USBoardModuleBase::VNX_CODE_HASH(0xe6617826230b7c1dull);

USBoardModuleBase::USBoardModuleBase(const std::string& _vnx_name)
	:	Module::Module(_vnx_name)
{
	vnx::read_config(vnx_name + ".config_file", config_file);
	vnx::read_config(vnx_name + ".input_can", input_can);
	vnx::read_config(vnx_name + ".input_serial", input_serial);
	vnx::read_config(vnx_name + ".output_config", output_config);
	vnx::read_config(vnx_name + ".output_data", output_data);
	vnx::read_config(vnx_name + ".topic_can_request", topic_can_request);
	vnx::read_config(vnx_name + ".topic_serial_request", topic_serial_request);
}

vnx::Hash64 USBoardModuleBase::get_type_hash() const {
	return VNX_TYPE_HASH;
}

const char* USBoardModuleBase::get_type_name() const {
	return "pilot.usboard.USBoardModule";
}
const vnx::TypeCode* USBoardModuleBase::get_type_code() const {
	return pilot::usboard::vnx_native_type_code_USBoardModuleBase;
}

void USBoardModuleBase::accept(vnx::Visitor& _visitor) const {
	const vnx::TypeCode* _type_code = pilot::usboard::vnx_native_type_code_USBoardModuleBase;
	_visitor.type_begin(*_type_code);
	_visitor.type_field(_type_code->fields[0], 0); vnx::accept(_visitor, input_can);
	_visitor.type_field(_type_code->fields[1], 1); vnx::accept(_visitor, input_serial);
	_visitor.type_field(_type_code->fields[2], 2); vnx::accept(_visitor, topic_can_request);
	_visitor.type_field(_type_code->fields[3], 3); vnx::accept(_visitor, topic_serial_request);
	_visitor.type_field(_type_code->fields[4], 4); vnx::accept(_visitor, output_data);
	_visitor.type_field(_type_code->fields[5], 5); vnx::accept(_visitor, output_config);
	_visitor.type_field(_type_code->fields[6], 6); vnx::accept(_visitor, config_file);
	_visitor.type_end(*_type_code);
}

void USBoardModuleBase::write(std::ostream& _out) const {
	_out << "{\"__type\": \"pilot.usboard.USBoardModule\"";
	_out << ", \"input_can\": "; vnx::write(_out, input_can);
	_out << ", \"input_serial\": "; vnx::write(_out, input_serial);
	_out << ", \"topic_can_request\": "; vnx::write(_out, topic_can_request);
	_out << ", \"topic_serial_request\": "; vnx::write(_out, topic_serial_request);
	_out << ", \"output_data\": "; vnx::write(_out, output_data);
	_out << ", \"output_config\": "; vnx::write(_out, output_config);
	_out << ", \"config_file\": "; vnx::write(_out, config_file);
	_out << "}";
}

void USBoardModuleBase::read(std::istream& _in) {
	std::map<std::string, std::string> _object;
	vnx::read_object(_in, _object);
	for(const auto& _entry : _object) {
		if(_entry.first == "config_file") {
			vnx::from_string(_entry.second, config_file);
		} else if(_entry.first == "input_can") {
			vnx::from_string(_entry.second, input_can);
		} else if(_entry.first == "input_serial") {
			vnx::from_string(_entry.second, input_serial);
		} else if(_entry.first == "output_config") {
			vnx::from_string(_entry.second, output_config);
		} else if(_entry.first == "output_data") {
			vnx::from_string(_entry.second, output_data);
		} else if(_entry.first == "topic_can_request") {
			vnx::from_string(_entry.second, topic_can_request);
		} else if(_entry.first == "topic_serial_request") {
			vnx::from_string(_entry.second, topic_serial_request);
		}
	}
}

vnx::Object USBoardModuleBase::to_object() const {
	vnx::Object _object;
	_object["__type"] = "pilot.usboard.USBoardModule";
	_object["input_can"] = input_can;
	_object["input_serial"] = input_serial;
	_object["topic_can_request"] = topic_can_request;
	_object["topic_serial_request"] = topic_serial_request;
	_object["output_data"] = output_data;
	_object["output_config"] = output_config;
	_object["config_file"] = config_file;
	return _object;
}

void USBoardModuleBase::from_object(const vnx::Object& _object) {
	for(const auto& _entry : _object.field) {
		if(_entry.first == "config_file") {
			_entry.second.to(config_file);
		} else if(_entry.first == "input_can") {
			_entry.second.to(input_can);
		} else if(_entry.first == "input_serial") {
			_entry.second.to(input_serial);
		} else if(_entry.first == "output_config") {
			_entry.second.to(output_config);
		} else if(_entry.first == "output_data") {
			_entry.second.to(output_data);
		} else if(_entry.first == "topic_can_request") {
			_entry.second.to(topic_can_request);
		} else if(_entry.first == "topic_serial_request") {
			_entry.second.to(topic_serial_request);
		}
	}
}

/// \private
std::ostream& operator<<(std::ostream& _out, const USBoardModuleBase& _value) {
	_value.write(_out);
	return _out;
}

/// \private
std::istream& operator>>(std::istream& _in, USBoardModuleBase& _value) {
	_value.read(_in);
	return _in;
}

const vnx::TypeCode* USBoardModuleBase::static_get_type_code() {
	const vnx::TypeCode* type_code = vnx::get_type_code(VNX_TYPE_HASH);
	if(!type_code) {
		type_code = vnx::register_type_code(static_create_type_code());
	}
	return type_code;
}

std::shared_ptr<vnx::TypeCode> USBoardModuleBase::static_create_type_code() {
	std::shared_ptr<vnx::TypeCode> type_code = std::make_shared<vnx::TypeCode>();
	type_code->name = "pilot.usboard.USBoardModule";
	type_code->type_hash = vnx::Hash64(0x43f03ccffe42b23full);
	type_code->code_hash = vnx::Hash64(0xe6617826230b7c1dull);
	type_code->is_native = true;
	type_code->methods.resize(8);
	type_code->methods[0] = ::pilot::usboard::USBoardModule_get_config::static_get_type_code();
	type_code->methods[1] = ::pilot::usboard::USBoardModule_is_connected::static_get_type_code();
	type_code->methods[2] = ::pilot::usboard::USBoardModule_request_analog_data::static_get_type_code();
	type_code->methods[3] = ::pilot::usboard::USBoardModule_request_config::static_get_type_code();
	type_code->methods[4] = ::pilot::usboard::USBoardModule_request_data::static_get_type_code();
	type_code->methods[5] = ::pilot::usboard::USBoardModule_save_config::static_get_type_code();
	type_code->methods[6] = ::pilot::usboard::USBoardModule_send_config::static_get_type_code();
	type_code->methods[7] = ::pilot::usboard::USBoardModule_set_channel_active::static_get_type_code();
	type_code->fields.resize(7);
	{
		vnx::TypeField& field = type_code->fields[0];
		field.is_extended = true;
		field.name = "input_can";
		field.code = {12, 5};
	}
	{
		vnx::TypeField& field = type_code->fields[1];
		field.is_extended = true;
		field.name = "input_serial";
		field.code = {12, 5};
	}
	{
		vnx::TypeField& field = type_code->fields[2];
		field.is_extended = true;
		field.name = "topic_can_request";
		field.code = {12, 5};
	}
	{
		vnx::TypeField& field = type_code->fields[3];
		field.is_extended = true;
		field.name = "topic_serial_request";
		field.code = {12, 5};
	}
	{
		vnx::TypeField& field = type_code->fields[4];
		field.is_extended = true;
		field.name = "output_data";
		field.code = {12, 5};
	}
	{
		vnx::TypeField& field = type_code->fields[5];
		field.is_extended = true;
		field.name = "output_config";
		field.code = {12, 5};
	}
	{
		vnx::TypeField& field = type_code->fields[6];
		field.is_extended = true;
		field.name = "config_file";
		field.code = {12, 5};
	}
	type_code->build();
	return type_code;
}

void USBoardModuleBase::vnx_handle_switch(std::shared_ptr<const vnx::Sample> _sample) {
}

std::shared_ptr<vnx::Value> USBoardModuleBase::vnx_call_switch(std::shared_ptr<const vnx::Value> _method, const vnx::request_id_t& _request_id) {
	const auto _type_hash = _method->get_type_hash();
	if(_type_hash == vnx::Hash64(0xe7bebc86c32def4eull)) {
		auto _args = std::dynamic_pointer_cast<const ::pilot::usboard::USBoardModule_get_config>(_method);
		if(!_args) {
			throw std::logic_error("vnx_call_switch(): !_args");
		}
		auto _return_value = ::pilot::usboard::USBoardModule_get_config_return::create();
		_return_value->_ret_0 = get_config();
		return _return_value;
	} else if(_type_hash == vnx::Hash64(0x67dc4b6f55cdaf01ull)) {
		auto _args = std::dynamic_pointer_cast<const ::pilot::usboard::USBoardModule_is_connected>(_method);
		if(!_args) {
			throw std::logic_error("vnx_call_switch(): !_args");
		}
		auto _return_value = ::pilot::usboard::USBoardModule_is_connected_return::create();
		_return_value->_ret_0 = is_connected();
		return _return_value;
	} else if(_type_hash == vnx::Hash64(0x623eabf252eec344ull)) {
		auto _args = std::dynamic_pointer_cast<const ::pilot::usboard::USBoardModule_request_analog_data>(_method);
		if(!_args) {
			throw std::logic_error("vnx_call_switch(): !_args");
		}
		auto _return_value = ::pilot::usboard::USBoardModule_request_analog_data_return::create();
		request_analog_data();
		return _return_value;
	} else if(_type_hash == vnx::Hash64(0xf38e6a2521f9f008ull)) {
		auto _args = std::dynamic_pointer_cast<const ::pilot::usboard::USBoardModule_request_config>(_method);
		if(!_args) {
			throw std::logic_error("vnx_call_switch(): !_args");
		}
		auto _return_value = ::pilot::usboard::USBoardModule_request_config_return::create();
		request_config();
		return _return_value;
	} else if(_type_hash == vnx::Hash64(0xc7bf45418c654bbfull)) {
		auto _args = std::dynamic_pointer_cast<const ::pilot::usboard::USBoardModule_request_data>(_method);
		if(!_args) {
			throw std::logic_error("vnx_call_switch(): !_args");
		}
		auto _return_value = ::pilot::usboard::USBoardModule_request_data_return::create();
		request_data(_args->groups);
		return _return_value;
	} else if(_type_hash == vnx::Hash64(0xc5d8f1fd2323ac3bull)) {
		auto _args = std::dynamic_pointer_cast<const ::pilot::usboard::USBoardModule_save_config>(_method);
		if(!_args) {
			throw std::logic_error("vnx_call_switch(): !_args");
		}
		auto _return_value = ::pilot::usboard::USBoardModule_save_config_return::create();
		save_config(_args->config);
		return _return_value;
	} else if(_type_hash == vnx::Hash64(0xc95ed3ee2bff3228ull)) {
		auto _args = std::dynamic_pointer_cast<const ::pilot::usboard::USBoardModule_send_config>(_method);
		if(!_args) {
			throw std::logic_error("vnx_call_switch(): !_args");
		}
		auto _return_value = ::pilot::usboard::USBoardModule_send_config_return::create();
		send_config(_args->config);
		return _return_value;
	} else if(_type_hash == vnx::Hash64(0x4d5fe6cf9c152a42ull)) {
		auto _args = std::dynamic_pointer_cast<const ::pilot::usboard::USBoardModule_set_channel_active>(_method);
		if(!_args) {
			throw std::logic_error("vnx_call_switch(): !_args");
		}
		auto _return_value = ::pilot::usboard::USBoardModule_set_channel_active_return::create();
		set_channel_active(_args->sensors);
		return _return_value;
	}
	auto _ex = vnx::NoSuchMethod::create();
	_ex->dst_mac = vnx_request ? vnx_request->dst_mac : 0;
	_ex->method = _method->get_type_name();
	return _ex;
}


} // namespace pilot
} // namespace usboard


namespace vnx {

void read(TypeInput& in, ::pilot::usboard::USBoardModuleBase& value, const TypeCode* type_code, const uint16_t* code) {
	if(!type_code) {
		throw std::logic_error("read(): type_code == 0");
	}
	if(code) {
		switch(code[0]) {
			case CODE_STRUCT: type_code = type_code->depends[code[1]]; break;
			case CODE_ALT_STRUCT: type_code = type_code->depends[vnx::flip_bytes(code[1])]; break;
			default: vnx::skip(in, type_code, code); return;
		}
	}
	const char* const _buf = in.read(type_code->total_field_size);
	if(type_code->is_matched) {
	}
	for(const vnx::TypeField* _field : type_code->ext_fields) {
		switch(_field->native_index) {
			case 0: vnx::read(in, value.input_can, type_code, _field->code.data()); break;
			case 1: vnx::read(in, value.input_serial, type_code, _field->code.data()); break;
			case 2: vnx::read(in, value.topic_can_request, type_code, _field->code.data()); break;
			case 3: vnx::read(in, value.topic_serial_request, type_code, _field->code.data()); break;
			case 4: vnx::read(in, value.output_data, type_code, _field->code.data()); break;
			case 5: vnx::read(in, value.output_config, type_code, _field->code.data()); break;
			case 6: vnx::read(in, value.config_file, type_code, _field->code.data()); break;
			default: vnx::skip(in, type_code, _field->code.data());
		}
	}
}

void write(TypeOutput& out, const ::pilot::usboard::USBoardModuleBase& value, const TypeCode* type_code, const uint16_t* code) {
	if(!type_code || (code && code[0] == CODE_ANY)) {
		type_code = pilot::usboard::vnx_native_type_code_USBoardModuleBase;
		out.write_type_code(type_code);
		vnx::write_class_header<::pilot::usboard::USBoardModuleBase>(out);
	}
	if(code && code[0] == CODE_STRUCT) {
		type_code = type_code->depends[code[1]];
	}
	vnx::write(out, value.input_can, type_code, type_code->fields[0].code.data());
	vnx::write(out, value.input_serial, type_code, type_code->fields[1].code.data());
	vnx::write(out, value.topic_can_request, type_code, type_code->fields[2].code.data());
	vnx::write(out, value.topic_serial_request, type_code, type_code->fields[3].code.data());
	vnx::write(out, value.output_data, type_code, type_code->fields[4].code.data());
	vnx::write(out, value.output_config, type_code, type_code->fields[5].code.data());
	vnx::write(out, value.config_file, type_code, type_code->fields[6].code.data());
}

void read(std::istream& in, ::pilot::usboard::USBoardModuleBase& value) {
	value.read(in);
}

void write(std::ostream& out, const ::pilot::usboard::USBoardModuleBase& value) {
	value.write(out);
}

void accept(Visitor& visitor, const ::pilot::usboard::USBoardModuleBase& value) {
	value.accept(visitor);
}

} // vnx
