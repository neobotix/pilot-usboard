package pilot.usboard;

import pilot.base.CAN_Frame;

class USBoardConfig {
	
	static const uint SENSOR_SETUP_4 = 1;
	static const uint SENSOR_SETUP_8 = 3;
	static const uint SENSOR_SETUP_12 = 7;
	static const uint SENSOR_SETUP_16 = 15;
	
	static const uint TRANSMIT_MODE_REQUEST = 0;
	static const uint TRANSMIT_MODE_CAN = 1;
	static const uint TRANSMIT_MODE_SERIAL = 2;
	static const uint TRANSMIT_MODE_CAN_SERIAL = 3;
	
	uint hardware_version = 0;				// hardware version number (0 = legacy, 20 = V2)
	
	uint serial_number = 0;					// board serial number
	
	uint can_id = 1024;						// CAN base address
	
	uint can_baudrate = 1000000;			// [bit/s]
	
	uint update_interval_ms = 500;			// data update interval (for all sensors) [ms]
	
	uint sensor_setup = 15;					// if using 4, 8, 12 or 16 sensors (see SENSOR_SETUP_* above)
	
	uint transmit_mode = 0;					// transmission mode (see TRANSMIT_MODE_* above)
	
	sensor_config_t sensor_config[16];		// individual sensor configs
	
	group_config_t group_config[4];			// config for each group of 4 sensors
	
	float low_pass_gain = 1;				// low pass filter gain (1 = no filtering)
	
	bool enable_analog_input = false;		// if to enable reading analog inputs
	
	bool enable_legacy_format = false;		// if to use old message format (when transmitting automatically)
	
	bool enable_can_termination = false;	// if to connect CAN bus termination resistance on the board
	
	
	vector<CAN_Frame> to_can_frames() const;
	
	void from_can_frames(vector<CAN_Frame> frames);
	
}
